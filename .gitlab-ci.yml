stages:
  - lint
  - test
  - build

lint_terraform:
  stage: lint
  image: docker
  script:
    - wget -P /tmp https://github.com/wata727/tflint/releases/download/v0.7.5/tflint_linux_amd64.zip
    - unzip -o -d /usr/local/bin/ /tmp/tflint_linux_amd64.zip
    - wget -P /tmp https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip
    - unzip -o -d /usr/local/bin/ /tmp/terraform_0.11.11_linux_amd64.zip
    - cd terraform
    - cp terraform.tfvars.example terraform.tfvars
    - terraform get
    - terraform init
    - terraform validate
    - tflint
  only:
    - triggers
    - branches

lint_dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - find . -name "Dockerfile*" | xargs hadolint
  only:
    - triggers
    - branches

test_ui:
  stage: test
  image: python:3.6.8-alpine3.8
  script:
    - cd src/search_engine_ui
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include ui/ui.py
  only:
    - triggers
    - branches

test_crawler:
  stage: test
  image: python:3.6.8-alpine3.8
  script:
    - cd src/search_engine_crawler
    - pip install -r requirements.txt -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include crawler/crawler.py
  only:
    - triggers
    - branches

build:
  stage: build
  image: docker:git
  services:
    - docker:dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE="kube-system"

  function install_dependencies() {

    apk add -U openssl curl tar gzip bash ca-certificates git
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
    apk add glibc-2.23-r3.apk
    rm glibc-2.23-r3.apk

    curl https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C $HOME
    export PATH=${PATH}:$HOME/gsutil

    curl https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz | tar zx

    mv linux-amd64/helm /usr/bin/
    helm version --client

    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh

    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      echo $CI_REGISTRY_PASSWORD > /tmp/password.txt
      cat /tmp/password.txt | docker login -u "$CI_REGISTRY_USER" --password-stdin
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

before_script:
  - *auto_devops
